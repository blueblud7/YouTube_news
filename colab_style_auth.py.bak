#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Google Colab 스타일의 간단한 OAuth 인증 핸들러
"""

import streamlit as st
import os
import json
import webbrowser
import requests
from datetime import datetime, timedelta
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from config import get_youtube_api_key

class ColabStyleAuth:
    def __init__(self):
        self.youtube_service = None
        self.authenticated = False
        self.access_token = None
        
    def authenticate_colab_style(self):
        """Google Colab 스타일의 간단한 OAuth 인증"""
        try:
            st.markdown("### 🔐 구글 로그인 (Colab 스타일)")
            st.markdown("아래 단계를 따라 구글 계정으로 로그인하세요.")
            
            # 1단계: 인증 URL 생성
            client_id = "your-client-id.apps.googleusercontent.com"
            scope = "https://www.googleapis.com/auth/youtube.readonly"
            
            # 인증 URL 생성
            auth_url = f"https://accounts.google.com/o/oauth2/auth?client_id={client_id}&scope={scope}&response_type=code&access_type=offline&redirect_uri=urn:ietf:wg:oauth:2.0:oob"
            
            st.markdown("#### 1단계: 인증 URL 클릭")
            st.markdown(f"**아래 링크를 클릭하여 구글 로그인 페이지를 열어주세요:**")
            
            # 클릭 가능한 링크
            st.markdown(f"[🔗 구글 로그인 페이지 열기]({auth_url})")
            
            # 또는 버튼으로 열기
            if st.button("🌐 브라우저에서 열기"):
                webbrowser.open(auth_url)
                st.success("브라우저에서 구글 로그인 페이지가 열렸습니다!")
            
            st.markdown("#### 2단계: 인증 코드 복사")
            st.markdown("로그인 후 나타나는 인증 코드를 복사하세요.")
            
            # 3단계: 인증 코드 입력
            st.markdown("#### 3단계: 인증 코드 입력")
            auth_code = st.text_input("인증 코드를 여기에 붙여넣으세요:", type="password", help="구글 로그인 페이지에서 받은 인증 코드를 입력하세요")
            
            if auth_code:
                if st.button("🔑 로그인"):
                    # 토큰 교환
                    token_url = "https://oauth2.googleapis.com/token"
                    token_data = {
                        "client_id": client_id,
                        "client_secret": "your-client-secret",
                        "code": auth_code,
                        "grant_type": "authorization_code",
                        "redirect_uri": "urn:ietf:wg:oauth:2.0:oob"
                    }
                    
                    with st.spinner("인증 중..."):
                        response = requests.post(token_url, data=token_data)
                    
                    if response.status_code == 200:
                        token_info = response.json()
                        self.access_token = token_info.get("access_token")
                        
                        # YouTube API 서비스 생성
                        self.youtube_service = build('youtube', 'v3', credentials=self.access_token)
                        self.authenticated = True
                        
                        st.success("✅ 구글 로그인 성공!")
                        st.balloons()
                        return True
                    else:
                        st.error("❌ 인증 코드가 유효하지 않습니다. 다시 시도해주세요.")
                        st.error(f"오류: {response.text}")
                        return False
            
            return False
                
        except Exception as e:
            st.error(f"OAuth 인증 중 오류: {str(e)}")
            return False
    
    def authenticate_simple(self):
        """간단한 인증 (API 키만 사용)"""
        try:
            api_key = get_youtube_api_key()
            if not api_key:
                st.error("YouTube API 키가 설정되지 않았습니다.")
                return False
            
            # API 키로 YouTube 서비스 생성
            self.youtube_service = build('youtube', 'v3', developerKey=api_key)
            self.authenticated = True
            return True
            
        except Exception as e:
            st.error(f"간단 인증 중 오류: {str(e)}")
            return False
    
    def search_videos_by_keyword(self, keyword, time_filter='1w', max_results=50):
        """키워드로 최신 동영상을 검색합니다."""
        if not self.youtube_service:
            if not self.authenticate_simple():
                return []
        
        try:
            # 시간 필터 설정
            published_after = None
            if time_filter == '1d':
                published_after = datetime.now() - timedelta(days=1)
            elif time_filter == '1w':
                published_after = datetime.now() - timedelta(weeks=1)
            elif time_filter == '1m':
                published_after = datetime.now() - timedelta(days=30)
            elif time_filter == 'latest':
                published_after = datetime.now() - timedelta(hours=6)
            
            published_after_str = published_after.isoformat() + 'Z' if published_after else None
            
            videos = []
            next_page_token = None
            
            with st.spinner(f"'{keyword}' 키워드로 동영상을 검색 중..."):
                while len(videos) < max_results:
                    request = self.youtube_service.search().list(
                        part='snippet',
                        q=keyword,
                        type='video',
                        order='date',
                        maxResults=min(50, max_results - len(videos)),
                        pageToken=next_page_token,
                        publishedAfter=published_after_str
                    )
                    
                    response = request.execute()
                    
                    for item in response['items']:
                        video = {
                            'video_id': item['id']['videoId'],
                            'title': item['snippet']['title'],
                            'description': item['snippet']['description'],
                            'channel_id': item['snippet']['channelId'],
                            'channel_title': item['snippet']['channelTitle'],
                            'published_at': item['snippet']['publishedAt'],
                            'thumbnail_url': item['snippet']['thumbnails']['medium']['url'],
                            'url': f"https://www.youtube.com/watch?v={item['id']['videoId']}"
                        }
                        videos.append(video)
                    
                    next_page_token = response.get('nextPageToken')
                    if not next_page_token:
                        break
            
            return videos
            
        except HttpError as e:
            st.error(f"동영상 검색 중 오류: {str(e)}")
            return []
        except Exception as e:
            st.error(f"동영상 검색 중 오류: {str(e)}")
            return []
    
    def get_subscriptions(self, max_results=50):
        """사용자의 구독 채널 목록을 가져옵니다."""
        if not self.authenticated:
            st.warning("먼저 구글 로그인을 해주세요.")
            return []
        
        try:
            subscriptions = []
            next_page_token = None
            
            with st.spinner("구독 채널 목록을 가져오는 중..."):
                while len(subscriptions) < max_results:
                    request = self.youtube_service.subscriptions().list(
                        part='snippet',
                        mine=True,
                        maxResults=min(50, max_results - len(subscriptions)),
                        pageToken=next_page_token
                    )
                    
                    response = request.execute()
                    
                    for item in response['items']:
                        subscription = {
                            'channel_id': item['snippet']['resourceId']['channelId'],
                            'channel_title': item['snippet']['title'],
                            'channel_description': item['snippet']['description'],
                            'thumbnail_url': item['snippet']['thumbnails']['default']['url'],
                            'subscribed_at': item['snippet']['publishedAt']
                        }
                        subscriptions.append(subscription)
                    
                    next_page_token = response.get('nextPageToken')
                    if not next_page_token:
                        break
            
            return subscriptions
            
        except HttpError as e:
            st.error(f"구독 목록 가져오기 중 오류: {str(e)}")
            return []
    
    def get_subscription_videos(self, time_filter='1w', max_results=50):
        """구독 채널의 최신 동영상을 가져옵니다."""
        if not self.authenticated:
            st.warning("먼저 구글 로그인을 해주세요.")
            return []
        
        try:
            # 구독 채널 목록 가져오기
            subscriptions = self.get_subscriptions(max_results=100)
            if not subscriptions:
                return []
            
            # 시간 필터 설정
            published_after = None
            if time_filter == '1d':
                published_after = datetime.now() - timedelta(days=1)
            elif time_filter == '1w':
                published_after = datetime.now() - timedelta(weeks=1)
            elif time_filter == '1m':
                published_after = datetime.now() - timedelta(days=30)
            elif time_filter == 'latest':
                published_after = datetime.now() - timedelta(hours=6)
            
            published_after_str = published_after.isoformat() + 'Z' if published_after else None
            
            all_videos = []
            
            # 진행률 표시
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            # 각 구독 채널의 최신 동영상 가져오기
            for i, subscription in enumerate(subscriptions):
                status_text.text(f"채널 '{subscription['channel_title']}'의 동영상을 가져오는 중... ({i+1}/{len(subscriptions)})")
                
                try:
                    request = self.youtube_service.search().list(
                        part='snippet',
                        channelId=subscription['channel_id'],
                        type='video',
                        order='date',
                        maxResults=10,  # 채널당 최대 10개
                        publishedAfter=published_after_str
                    )
                    
                    response = request.execute()
                    
                    for item in response['items']:
                        video = {
                            'video_id': item['id']['videoId'],
                            'title': item['snippet']['title'],
                            'description': item['snippet']['description'],
                            'channel_id': item['snippet']['channelId'],
                            'channel_title': item['snippet']['channelTitle'],
                            'published_at': item['snippet']['publishedAt'],
                            'thumbnail_url': item['snippet']['thumbnails']['medium']['url'],
                            'url': f"https://www.youtube.com/watch?v={item['id']['videoId']}",
                            'subscription': subscription['channel_title']
                        }
                        all_videos.append(video)
                        
                        if len(all_videos) >= max_results:
                            break
                    
                    if len(all_videos) >= max_results:
                        break
                        
                except HttpError as e:
                    st.warning(f"채널 {subscription['channel_title']}의 동영상 가져오기 실패: {str(e)}")
                    continue
                
                # 진행률 업데이트
                progress_bar.progress((i + 1) / len(subscriptions))
            
            status_text.text("완료!")
            progress_bar.empty()
            
            # 발행일 기준으로 정렬
            all_videos.sort(key=lambda x: x['published_at'], reverse=True)
            return all_videos[:max_results]
            
        except HttpError as e:
            st.error(f"구독 동영상 가져오기 중 오류: {str(e)}")
            return []

# 전역 인스턴스
colab_auth_handler = ColabStyleAuth() 