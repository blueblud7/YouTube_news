#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Streamlit OAuth를 사용한 구글 인증 핸들러
"""

import streamlit as st
import os
import json
from datetime import datetime, timedelta
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from config import get_youtube_api_key

class StreamlitOAuthHandler:
    def __init__(self):
        self.youtube_service = None
        self.authenticated = False
        
    def authenticate_with_streamlit(self):
        """Streamlit OAuth를 사용한 구글 인증"""
        try:
            # Streamlit OAuth 설정
            oauth_config = {
                "client_id": "your-client-id.apps.googleusercontent.com",
                "client_secret": "your-client-secret",
                "redirect_uri": "http://localhost:8501",
                "scope": [
                    "https://www.googleapis.com/auth/youtube.readonly",
                    "https://www.googleapis.com/auth/youtube.force-ssl"
                ]
            }
            
            # Streamlit OAuth 컴포넌트 사용
            auth_result = st.oauth(
                client_id=oauth_config["client_id"],
                client_secret=oauth_config["client_secret"],
                redirect_uri=oauth_config["redirect_uri"],
                scope=oauth_config["scope"]
            )
            
            if auth_result:
                # YouTube API 서비스 생성
                self.youtube_service = build('youtube', 'v3', credentials=auth_result)
                self.authenticated = True
                return True
            else:
                return False
                
        except Exception as e:
            st.error(f"OAuth 인증 중 오류: {str(e)}")
            return False
    
    def authenticate_simple(self):
        """간단한 인증 (API 키만 사용)"""
        try:
            api_key = get_youtube_api_key()
            if not api_key:
                st.error("YouTube API 키가 설정되지 않았습니다.")
                return False
            
            # API 키로 YouTube 서비스 생성
            self.youtube_service = build('youtube', 'v3', developerKey=api_key)
            self.authenticated = True
            return True
            
        except Exception as e:
            st.error(f"간단 인증 중 오류: {str(e)}")
            return False
    
    def search_videos_by_keyword(self, keyword, time_filter='1w', max_results=50):
        """키워드로 최신 동영상을 검색합니다."""
        if not self.youtube_service:
            if not self.authenticate_simple():
                return []
        
        try:
            # 시간 필터 설정
            published_after = None
            if time_filter == '1d':
                published_after = datetime.now() - timedelta(days=1)
            elif time_filter == '1w':
                published_after = datetime.now() - timedelta(weeks=1)
            elif time_filter == '1m':
                published_after = datetime.now() - timedelta(days=30)
            elif time_filter == 'latest':
                published_after = datetime.now() - timedelta(hours=6)
            
            published_after_str = published_after.isoformat() + 'Z' if published_after else None
            
            videos = []
            next_page_token = None
            
            while len(videos) < max_results:
                request = self.youtube_service.search().list(
                    part='snippet',
                    q=keyword,
                    type='video',
                    order='date',
                    maxResults=min(50, max_results - len(videos)),
                    pageToken=next_page_token,
                    publishedAfter=published_after_str
                )
                
                response = request.execute()
                
                for item in response['items']:
                    video = {
                        'video_id': item['id']['videoId'],
                        'title': item['snippet']['title'],
                        'description': item['snippet']['description'],
                        'channel_id': item['snippet']['channelId'],
                        'channel_title': item['snippet']['channelTitle'],
                        'published_at': item['snippet']['publishedAt'],
                        'thumbnail_url': item['snippet']['thumbnails']['medium']['url'],
                        'url': f"https://www.youtube.com/watch?v={item['id']['videoId']}"
                    }
                    videos.append(video)
                
                next_page_token = response.get('nextPageToken')
                if not next_page_token:
                    break
            
            return videos
            
        except HttpError as e:
            st.error(f"동영상 검색 중 오류: {str(e)}")
            return []
        except Exception as e:
            st.error(f"동영상 검색 중 오류: {str(e)}")
            return []
    
    def get_subscriptions(self, max_results=50):
        """사용자의 구독 채널 목록을 가져옵니다."""
        if not self.authenticated:
            st.warning("먼저 구글 로그인을 해주세요.")
            return []
        
        try:
            subscriptions = []
            next_page_token = None
            
            while len(subscriptions) < max_results:
                request = self.youtube_service.subscriptions().list(
                    part='snippet',
                    mine=True,
                    maxResults=min(50, max_results - len(subscriptions)),
                    pageToken=next_page_token
                )
                
                response = request.execute()
                
                for item in response['items']:
                    subscription = {
                        'channel_id': item['snippet']['resourceId']['channelId'],
                        'channel_title': item['snippet']['title'],
                        'channel_description': item['snippet']['description'],
                        'thumbnail_url': item['snippet']['thumbnails']['default']['url'],
                        'subscribed_at': item['snippet']['publishedAt']
                    }
                    subscriptions.append(subscription)
                
                next_page_token = response.get('nextPageToken')
                if not next_page_token:
                    break
            
            return subscriptions
            
        except HttpError as e:
            st.error(f"구독 목록 가져오기 중 오류: {str(e)}")
            return []
    
    def get_subscription_videos(self, time_filter='1w', max_results=50):
        """구독 채널의 최신 동영상을 가져옵니다."""
        if not self.authenticated:
            st.warning("먼저 구글 로그인을 해주세요.")
            return []
        
        try:
            # 구독 채널 목록 가져오기
            subscriptions = self.get_subscriptions(max_results=100)
            if not subscriptions:
                return []
            
            # 시간 필터 설정
            published_after = None
            if time_filter == '1d':
                published_after = datetime.now() - timedelta(days=1)
            elif time_filter == '1w':
                published_after = datetime.now() - timedelta(weeks=1)
            elif time_filter == '1m':
                published_after = datetime.now() - timedelta(days=30)
            elif time_filter == 'latest':
                published_after = datetime.now() - timedelta(hours=6)
            
            published_after_str = published_after.isoformat() + 'Z' if published_after else None
            
            all_videos = []
            
            # 각 구독 채널의 최신 동영상 가져오기
            for subscription in subscriptions:
                try:
                    request = self.youtube_service.search().list(
                        part='snippet',
                        channelId=subscription['channel_id'],
                        type='video',
                        order='date',
                        maxResults=10,  # 채널당 최대 10개
                        publishedAfter=published_after_str
                    )
                    
                    response = request.execute()
                    
                    for item in response['items']:
                        video = {
                            'video_id': item['id']['videoId'],
                            'title': item['snippet']['title'],
                            'description': item['snippet']['description'],
                            'channel_id': item['snippet']['channelId'],
                            'channel_title': item['snippet']['channelTitle'],
                            'published_at': item['snippet']['publishedAt'],
                            'thumbnail_url': item['snippet']['thumbnails']['medium']['url'],
                            'url': f"https://www.youtube.com/watch?v={item['id']['videoId']}",
                            'subscription': subscription['channel_title']
                        }
                        all_videos.append(video)
                        
                        if len(all_videos) >= max_results:
                            break
                    
                    if len(all_videos) >= max_results:
                        break
                        
                except HttpError as e:
                    st.warning(f"채널 {subscription['channel_title']}의 동영상 가져오기 실패: {str(e)}")
                    continue
            
            # 발행일 기준으로 정렬
            all_videos.sort(key=lambda x: x['published_at'], reverse=True)
            return all_videos[:max_results]
            
        except HttpError as e:
            st.error(f"구독 동영상 가져오기 중 오류: {str(e)}")
            return []

# 전역 인스턴스
streamlit_auth_handler = StreamlitOAuthHandler() 